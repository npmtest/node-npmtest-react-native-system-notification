{"/home/travis/build/npmtest/node-npmtest-react-native-system-notification/test.js":"/* istanbul instrument in package npmtest_react_native_system_notification */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-system-notification/lib.npmtest_react_native_system_notification.js":"/* istanbul instrument in package npmtest_react_native_system_notification */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_react_native_system_notification = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_react_native_system_notification = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-system-notification/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-react-native-system-notification && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_react_native_system_notification */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_react_native_system_notification\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_react_native_system_notification.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_react_native_system_notification.rollup.js'] =\n            local.assetsDict['/assets.npmtest_react_native_system_notification.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_react_native_system_notification.__dirname + '/lib.npmtest_react_native_system_notification.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-system-notification/node_modules/react-native-system-notification/index.android.js":"'use strict';\n\nvar React = require('react-native');\nvar { DeviceEventEmitter } = React;\n\nvar NotificationModule = require('react-native').NativeModules.NotificationModule;\n\n// Warp the native module so we can do some pre/post processing to have a cleaner API.\nvar Notification = {\n  create: function(attributes = {}) {\n    return new Promise(function(resolve, reject) {\n      NotificationModule.rGetApplicationName(function(e) {}, function(applicationName) {\n\n        // Set defaults\n        if (!attributes.subject) attributes.subject = applicationName;\n        attributes = encodeNativeNotification(attributes);\n\n        NotificationModule.rCreate(attributes.id, attributes, reject, function(notification) {\n          resolve(decodeNativeNotification(notification));\n        });\n      });\n    });\n  },\n\n  getIDs: function() {\n    return new Promise(function(resolve, reject) {\n      NotificationModule.rGetIDs(reject, resolve);\n    });\n  },\n\n  find: function(id) {\n    return new Promise(function(resolve, reject) {\n      NotificationModule.rFind(id, reject, function(notification) {\n        resolve(decodeNativeNotification(notification));\n      });\n    });\n  },\n\n  delete: function(id) {\n    return new Promise(function(resolve, reject) {\n      NotificationModule.rDelete(id, reject, function(notification) {\n        resolve(decodeNativeNotification(notification));\n      });\n    });\n  },\n\n  deleteAll: function() {\n    return new Promise(function(resolve, reject) {\n      NotificationModule.rDeleteAll(reject, resolve);\n    });\n  },\n\n  clear: function(id) {\n    return new Promise(function(resolve, reject) {\n      NotificationModule.rClear(id, reject, function(notification) {\n        resolve(decodeNativeNotification(notification));\n      });\n    });\n  },\n\n  clearAll: function() {\n    return new Promise(function(resolve, reject) {\n      NotificationModule.rClearAll(reject, resolve);\n    });\n  },\n\n  addListener: function(type, listener) {\n    switch (type) {\n      case 'press':\n      case 'click':\n        DeviceEventEmitter.addListener('sysNotificationClick', listener);\n\n        NotificationModule.getInitialSysNotification(function(initialSysNotificationId,\n                                                              initialSysNotificationAction, \n                                                              initialSysNotificationPayload) {\n          if (initialSysNotificationId) {\n            var event = {\n              action: initialSysNotificationAction,\n              payload: JSON.parse(initialSysNotificationPayload)\n            }\n\n            listener(event);\n            \n            NotificationModule.removeInitialSysNotification();\n          }\n        });\n        \n        break;\n    }\n  },\n\n  removeAllListeners: function (type) {\n    switch (type) {\n      case 'press':\n      case 'click':\n        DeviceEventEmitter.removeAllListeners('sysNotificationClick');\n        break;\n    }\n  },\n\n  module: NotificationModule\n}\n\nmodule.exports = Notification;\n\n// Encode the JS notification to pass into the native model\nfunction encodeNativeNotification(attributes) {\n  if (typeof attributes === 'string') attributes = JSON.parse(attributes);\n  // Set defaults\n  if (!attributes.smallIcon) attributes.smallIcon = 'ic_launcher';\n  if (!attributes.id) attributes.id = parseInt(Math.random() * 100000);\n  if (!attributes.action) attributes.action = 'DEFAULT';\n  if (!attributes.payload) attributes.payload = {};\n  if (attributes.autoClear === undefined) attributes.autoClear = true;\n  if (attributes.tickerText === undefined) {\n    if (attributes.subject) {\n      attributes.tickerText = attributes.subject + ': ' + attributes.message;\n    } else {\n      attributes.tickerText = attributes.message;\n    }\n  }\n\n  if (attributes.priority === undefined) attributes.priority = 1;\n  if (attributes.sound === undefined) attributes.sound = 'default';\n  if (attributes.vibrate === undefined) attributes.vibrate = 'default';\n  if (attributes.lights === undefined) attributes.lights = 'default';\n\n  attributes.delayed = (attributes.delay !== undefined);\n  attributes.scheduled = (attributes.sendAt !== undefined);\n\n  // Ensure date are Dates\n  if (attributes.sendAt && typeof attributes.sendAt !== 'object') attributes.sendAt = new Date(attributes.sendAt);\n  if (attributes.endAt && typeof attributes.endAt !== 'object') attributes.endAt = new Date(attributes.endAt);\n  if (attributes.when && typeof attributes.when !== 'object') attributes.when = new Date(attributes.when);\n\n  // Unfold sendAt\n  if (attributes.sendAt !== undefined) {\n    attributes.sendAtYear = attributes.sendAt.getFullYear();\n    attributes.sendAtMonth = attributes.sendAt.getMonth() + 1;\n    attributes.sendAtDay = attributes.sendAt.getDate();\n    attributes.sendAtWeekDay = attributes.sendAt.getDay();\n    attributes.sendAtHour = attributes.sendAt.getHours();\n    attributes.sendAtMinute = attributes.sendAt.getMinutes();\n  }\n\n  // Convert date objects into number\n  if (attributes.sendAt) attributes.sendAt = attributes.sendAt.getTime();\n  if (attributes.endAt) attributes.endAt = attributes.endAt.getTime();\n  if (attributes.when) attributes.when = attributes.when.getTime();\n\n  // Prepare scheduled notifications\n  if (attributes.sendAt !== undefined) {\n\n    // Set repeatType for custom repeat time\n    if (typeof attributes.repeatEvery === 'number') {\n      attributes.repeatType = 'time';\n      attributes.repeatTime = attributes.repeatEvery;\n    } else if (typeof attributes.repeatEvery === 'string') {\n      attributes.repeatType = attributes.repeatEvery;\n    }\n\n    // Naitve module only recognizes the endAt attribute, so we need to\n    // convert repeatCount to the endAt time base on repeatEvery\n    if (attributes.repeatCount) {\n      if (typeof attributes.repeatEvery === 'number') {\n        attributes.endAt = parseInt(attributes.sendAt + attributes.repeatEvery * attributes.repeatCount + (attributes.repeatEvery / 2));\n\n      } else if (typeof attributes.repeatEvery === 'string') {\n        switch (attributes.repeatEvery) {\n          case 'minute':\n            attributes.endAt = attributes.sendAt + 60000 * attributes.repeatCount + 1000 * 30;\n            break;\n\n          case 'hour':\n            attributes.endAt = attributes.sendAt + 60000 * 60 * attributes.repeatCount + 60000 * 30;\n            break;\n\n          case 'halfDay':\n            attributes.endAt = attributes.sendAt + 60000 * 60 * 12 * attributes.repeatCount + 60000 * 60 * 6;\n            break;\n\n          case 'day':\n            attributes.endAt = attributes.sendAt + 60000 * 60 * 24 * attributes.repeatCount + 60000 * 60 * 12;\n            break;\n\n          case 'week':\n            attributes.endAt = attributes.sendAt + 60000 * 60 * 24 * 7 * attributes.repeatCount + 60000 * 60 * 24 * 3;\n            break;\n\n          case 'month':\n            attributes.endAt = attributes.sendAt + 60000 * 60 * 24 * 30 * attributes.repeatCount + 60000 * 60 * 24 * 15;\n            break;\n\n          case 'year':\n            attributes.endAt = attributes.sendAt + 60000 * 60 * 24 * 365 * attributes.repeatCount + 60000 * 60 * 24 * 100;\n            break;\n        }\n      }\n    }\n  }\n\n  // Convert long numbers into string before passing them into native modle,\n  // incase of integer overflow\n  if (attributes.sendAt) attributes.sendAt = attributes.sendAt.toString();\n  if (attributes.endAt) attributes.endAt = attributes.endAt.toString();\n  if (attributes.when) attributes.when = attributes.when.toString();\n  if (attributes.repeatEvery) attributes.repeatEvery = attributes.repeatEvery.toString();\n\n  // Convert float into integer\n  if (attributes.progress) attributes.progress = attributes.progress * 1000;\n\n  // Stringify the payload\n  attributes.payload = JSON.stringify(attributes.payload);\n\n  return attributes;\n}\n\n// Decode the notification data from the native module to pass into JS\nfunction decodeNativeNotification(attributes) {\n  // Convert dates back to date object\n  if (attributes.sendAt) attributes.sendAt = new Date(parseInt(attributes.sendAt));\n  if (attributes.endAt) attributes.endAt = new Date(parseInt(attributes.endAt));\n  if (attributes.when) attributes.when = new Date(parseInt(attributes.when));\n\n  // Parse possible integer\n  if (parseInt(attributes.repeatEvery).toString() === attributes.repeatEvery) attributes.repeatEvery = parseInt(attributes.repeatEvery);\n\n  // Convert integer into float\n  if (attributes.progress) attributes.progress = attributes.progress / 1000;\n\n  // Parse the payload\n  if (attributes.payload) attributes.payload = JSON.parse(attributes.payload);\n\n  return attributes;\n}\n\nDeviceEventEmitter.addListener('sysModuleNotificationClick', function(e) {\n  var event = {\n    action: e.action,\n    payload: JSON.parse(e.payload)\n  }\n\n  DeviceEventEmitter.emit('sysNotificationClick', event);\n});\n","/home/travis/build/npmtest/node-npmtest-react-native-system-notification/node_modules/react-native-system-notification/index.ios.js":"'use strict';\n\nclass Notification {\n\n  static addEventListener(type, handler) {\n    warning(false, 'Cannot listen to Notification events on IOS.');\n  }\n\n  static removeEventListener(type, handler) {\n    warning(false, 'Cannot remove Notification listener on IOS.');\n  }\n\n}\n\nNotification.currentState = null;\n\nmodule.exports = Notification;\n"}